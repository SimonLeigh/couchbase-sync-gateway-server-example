{"version":3,"file":"app.component.js","sourceRoot":"","sources":["../Users/nraboy/Desktop/Couchbase Sync SDK Example/angular/tmp/broccoli_type_script_compiler-input_base_path-Hn49o16J.tmp/0/src/app/app.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Http, Request, RequestMethod, Headers, HTTP_PROVIDERS } from '@angular/http';\nimport 'rxjs/Rx';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app/app.component.html'\n})\nexport class AppComponent implements OnInit {\n\n    public todos: Array<any>;\n    public title: string;\n    public description: string;\n\n    public constructor(private http: Http) {\n        this.todos = [];\n    }\n\n    public ngOnInit() {\n        this.http.get(\"http://localhost:8080/api/todo\")\n            .map(result => result.json())\n            .subscribe(result => {\n                this.todos = result;\n            }, error => {\n                console.error(error);\n            });\n    }\n\n    public save() {\n        if(this.title && this.description) {\n            let requestHeaders = new Headers();\n            requestHeaders.append(\"Content-Type\", \"application/json\");\n            this.http.request(new Request({\n                method: RequestMethod.Post,\n                url: \"http://localhost:8080/api/todo\",\n                body: JSON.stringify({title: this.title, description: this.description}),\n                headers: requestHeaders\n            }))\n            .map(result => result.json())\n            .subscribe(result => {\n                this.todos.push({\n                    \"id\": result.id,\n                    \"rev\": result.rev,\n                    \"title\": this.title,\n                    \"description\": this.description\n                });\n            }, error => {\n                console.error(error);\n            });\n        }\n    }\n\n    public clear() {\n        let documents: Array<any> = [];\n        for(let i = 0; i < this.todos.length; i++) {\n            documents.push({\"id\": this.todos[i].id, \"rev\": this.todos[i].rev});\n        }\n        let requestHeaders = new Headers();\n        requestHeaders.append(\"Content-Type\", \"application/json\");\n        this.http.request(new Request({\n            method: RequestMethod.Delete,\n            url: \"http://localhost:8080/api/todo\",\n            body: JSON.stringify(documents),\n            headers: requestHeaders\n        }))\n        .map(result => result.json())\n        .subscribe(result => {\n            this.todos = [];\n        }, error => {\n            console.error(error);\n        });\n    }\n\n}\n"]}